{"version":3,"file":"static/js/862.9038a229.chunk.js","mappings":";2PAaA,MAAMA,EAA0BA,KAC9BC,SAASC,iBAAiB,cAAc,QAAU,EAE9CC,EAA0BA,KAC9B,MAAMC,EAAMH,SACZ,IAAII,GAAO,EACXD,EAAIF,iBAAiB,cAAc,KACjC,GAAIG,EACF,OAEF,IAAIC,EAAQ,EACRC,EAAW,GACf,MAAMC,EAAK,IAAIC,YAAY,gBAAiB,CAC1CC,SAAS,EACTC,OAAQ,CACNC,SAASC,EAAUC,GACjBP,EAASQ,KAAK,CAAEF,WAAUC,UAASE,GAAIV,KACzC,KAGJF,EAAIa,cAAcT,GAClB,MAaMU,EAAkBA,KACtB,GAAIX,EAASY,OAAS,EAAG,CACvB,IAAIC,EAAkB,CACpBP,SAAUQ,OAAOC,iBACjBR,QAASA,KAAe,EACxBE,IAAK,GAEPT,EAASgB,SAAST,IACZA,EAAQD,UAAYO,EAAgBP,WACtCO,EAAkBN,EACpB,IAEFT,GAAO,EACPE,EAAWA,EAASiB,QAAQV,GAAYA,EAAQE,KAAOI,EAAgBJ,KA1BrDS,WACpB,IACE,GAAwB,OAApBC,QAAgD,IAApBA,OAA6B,EAASA,EAAgBZ,QAAS,CAC7F,MAAMa,EAASD,EAAgBZ,QAAQI,GACzB,MAAVS,SACIA,CAEV,CACF,CACA,MAAOC,GACLC,QAAQC,MAAMF,EAChB,GAgBEG,CAAcX,GAAiBY,MAAK,IAAO3B,GAAO,GACpD,GAEFa,GAAiB,GACjB,EAEEe,EAA+B,IAC/BC,EAA4B","sources":["../node_modules/@ionic/core/components/hardware-back-button.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * When hardwareBackButton: false in config,\n * we need to make sure we also block the default\n * webview behavior. If we don't then it will be\n * possible for users to navigate backward while\n * an overlay is still open. Additionally, it will\n * give the appearance that the hardwareBackButton\n * config is not working as the page transition\n * will still happen.\n */\nconst blockHardwareBackButton = () => {\n  document.addEventListener('backbutton', () => { }); // eslint-disable-line\n};\nconst startHardwareBackButton = () => {\n  const doc = document;\n  let busy = false;\n  doc.addEventListener('backbutton', () => {\n    if (busy) {\n      return;\n    }\n    let index = 0;\n    let handlers = [];\n    const ev = new CustomEvent('ionBackButton', {\n      bubbles: false,\n      detail: {\n        register(priority, handler) {\n          handlers.push({ priority, handler, id: index++ });\n        },\n      },\n    });\n    doc.dispatchEvent(ev);\n    const executeAction = async (handlerRegister) => {\n      try {\n        if (handlerRegister === null || handlerRegister === void 0 ? void 0 : handlerRegister.handler) {\n          const result = handlerRegister.handler(processHandlers);\n          if (result != null) {\n            await result;\n          }\n        }\n      }\n      catch (e) {\n        console.error(e);\n      }\n    };\n    const processHandlers = () => {\n      if (handlers.length > 0) {\n        let selectedHandler = {\n          priority: Number.MIN_SAFE_INTEGER,\n          handler: () => undefined,\n          id: -1,\n        };\n        handlers.forEach((handler) => {\n          if (handler.priority >= selectedHandler.priority) {\n            selectedHandler = handler;\n          }\n        });\n        busy = true;\n        handlers = handlers.filter((handler) => handler.id !== selectedHandler.id);\n        executeAction(selectedHandler).then(() => (busy = false));\n      }\n    };\n    processHandlers();\n  });\n};\nconst OVERLAY_BACK_BUTTON_PRIORITY = 100;\nconst MENU_BACK_BUTTON_PRIORITY = 99; // 1 less than overlay priority since menu is displayed behind overlays\n\nexport { MENU_BACK_BUTTON_PRIORITY, OVERLAY_BACK_BUTTON_PRIORITY, blockHardwareBackButton, startHardwareBackButton };\n"],"names":["blockHardwareBackButton","document","addEventListener","startHardwareBackButton","doc","busy","index","handlers","ev","CustomEvent","bubbles","detail","register","priority","handler","push","id","dispatchEvent","processHandlers","length","selectedHandler","Number","MIN_SAFE_INTEGER","forEach","filter","async","handlerRegister","result","e","console","error","executeAction","then","OVERLAY_BACK_BUTTON_PRIORITY","MENU_BACK_BUTTON_PRIORITY"],"sourceRoot":""}