{"version":3,"file":"static/js/186.5feabdd0.chunk.js","mappings":"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","sources":["../node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    /**\n     * Scroll assist should not run again\n     * on inputs that have been manually\n     * focused inside of the scroll assist\n     * implementation.\n     */\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n      return;\n    }\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n  /**\n   * If element is already focused then\n   * a new focusin event will not be dispatched\n   * to remove the SKIL_SCROLL_ASSIST attribute.\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    setManualFocus(inputEl);\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  setManualFocus(inputEl);\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding = scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      setManualFocus(inputEl);\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","arguments","length","undefined","disabledClonedInput","has","addClone","removeClone","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","calcScrollData","inputRect","contentRect","keyboardHeight","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","contentEl","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setTimeout","setClearScrollPaddingListener","doneCallback","addEventListener","clearScrollPadding","once","currentPadding","SKIP_SCROLL_ASSIST","setManualFocus","el","document","activeElement","setAttribute","focus","jsSetFocus","async","footerEl","enableScrollPadding","disableClonedInput","scrollData","getScrollData","_a","itemEl","closest","getBoundingClientRect","defaultView","innerHeight","raf","click","window","scrollContentTimeout","scrollContent","removeEventListener","doubleKeyboardEventListener","scrollByPoint","scrollEl","getScrollElement","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","startInputShims","config","platform","doc","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","keyboardResizeMode","Keyboard","getResizeMode","registerInput","Promise","resolve","componentOnReady","inputRoot","shadowRoot","querySelector","findClosestIonContent","rmFn","enableHideCaretOnScroll","scrollHideCaret","shouldHideCaret","input","getRootNode","onBlur","showCaret","keyboardResize","addScrollPadding","mode","KeyboardResize","None","focusIn","hasAttribute","removeAttribute","enableScrollAssist","enableInputBlurring","focused","didScroll","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","blur","detail","fn","unregisterInput"],"sourceRoot":""}