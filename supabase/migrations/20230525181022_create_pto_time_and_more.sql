alter table "public"."events" drop constraint "events_user_fkey";

create table "public"."apps" (
    "id" text not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "appflow_id" text not null
);


alter table "public"."apps" enable row level security;

create table "public"."customer" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "salesperson" uuid,
    "name" text not null
);


alter table "public"."customer" enable row level security;

create table "public"."pto_requests" (
    "id" bigint generated by default as identity not null,
    "requested_at" date not null default now(),
    "requester" uuid,
    "approver" uuid,
    "start_date" date not null,
    "end_date" date not null,
    "type" text
);


alter table "public"."pto_requests" enable row level security;

create table "public"."time_entries" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "contractor" uuid,
    "customer" bigint,
    "date" date not null,
    "start_time" time without time zone not null,
    "end_time" time without time zone not null,
    "approval_status" smallint not null,
    "approver" uuid
);


alter table "public"."time_entries" enable row level security;

alter table "public"."events" drop column "user";

alter table "public"."events" add column "user_id" uuid;

CREATE UNIQUE INDEX "Apps_pkey" ON public.apps USING btree (id);

CREATE UNIQUE INDEX customer_pkey ON public.customer USING btree (id);

CREATE UNIQUE INDEX pto_requests_pkey ON public.pto_requests USING btree (id);

CREATE UNIQUE INDEX time_entries_pkey ON public.time_entries USING btree (id);

alter table "public"."apps" add constraint "Apps_pkey" PRIMARY KEY using index "Apps_pkey";

alter table "public"."customer" add constraint "customer_pkey" PRIMARY KEY using index "customer_pkey";

alter table "public"."pto_requests" add constraint "pto_requests_pkey" PRIMARY KEY using index "pto_requests_pkey";

alter table "public"."time_entries" add constraint "time_entries_pkey" PRIMARY KEY using index "time_entries_pkey";

alter table "public"."customer" add constraint "customer_salesperson_fkey" FOREIGN KEY (salesperson) REFERENCES employees(id) ON DELETE SET NULL not valid;

alter table "public"."customer" validate constraint "customer_salesperson_fkey";

alter table "public"."events" add constraint "events_user_id_fkey" FOREIGN KEY (user_id) REFERENCES employees(id) ON DELETE CASCADE not valid;

alter table "public"."events" validate constraint "events_user_id_fkey";

alter table "public"."pto_requests" add constraint "pto_requests_approver_fkey" FOREIGN KEY (approver) REFERENCES employees(id) ON DELETE SET NULL not valid;

alter table "public"."pto_requests" validate constraint "pto_requests_approver_fkey";

alter table "public"."pto_requests" add constraint "pto_requests_requester_fkey" FOREIGN KEY (requester) REFERENCES employees(id) ON DELETE SET NULL not valid;

alter table "public"."pto_requests" validate constraint "pto_requests_requester_fkey";

alter table "public"."time_entries" add constraint "time_entries_approver_fkey" FOREIGN KEY (approver) REFERENCES employees(id) ON DELETE SET NULL not valid;

alter table "public"."time_entries" validate constraint "time_entries_approver_fkey";

alter table "public"."time_entries" add constraint "time_entries_contractor_fkey" FOREIGN KEY (contractor) REFERENCES employees(id) ON DELETE SET NULL not valid;

alter table "public"."time_entries" validate constraint "time_entries_contractor_fkey";

alter table "public"."time_entries" add constraint "time_entries_customer_fkey" FOREIGN KEY (customer) REFERENCES customer(id) ON DELETE SET NULL not valid;

alter table "public"."time_entries" validate constraint "time_entries_customer_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_events(p_id text)
 RETURNS SETOF events
 LANGUAGE sql
AS $function$
    select * from events where user_id = p_id::uuid;
$function$
;

create policy "Enable read for authenticated users only"
on "public"."apps"
as permissive
for select
to authenticated
using (true);


create policy "Enable all for authenticated users only"
on "public"."events"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "Enable Read for authenticated users only"
on "public"."newsfeed"
as permissive
for select
to authenticated
using (true);


create policy "Enable all for authenticated users only"
on "public"."pto_requests"
as permissive
for all
to authenticated
using (true)
with check (true);




